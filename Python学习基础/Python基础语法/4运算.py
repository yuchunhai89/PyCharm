__author__ = 'yuchunhai'
#1、加、减、乘、除、求余、乘方
#2、乘方  ** 右结合
#2**3=8
#2**2**3=256
#（2**2）**3=64
#3、整数运算结果仍然是整数，浮点数运算结果仍然是浮点数。
#但是整数和浮点数混合运算的结果就变成浮点数了。
#4、字符串与整数相乘
# print 'abc' * 3  结果 abcabcabc
# 5、因为Python把0、空字符串''和None看成 False，其他数值和非空字符串都看成 True
# True and 'a=T' 计算结果是 'a=T'
# 继续计算 'a=T' or 'a=F' 计算结果还是 'a=T'
# 要解释上述结果，又涉及到 and 和 or 运算的一条重要法则：短路计算。
# ①在计算 a and b 时，如果 a 是 False，则根据与运算法则，整个结果必定为 False，因此返回 a；如果 a 是 True，则整个计算结果必定取决与 b，因此返回 b。
# ②在计算 a or b 时，如果 a 是 True，则根据或运算法则，整个计算结果必定为 True，因此返回 a；如果 a 是 False，则整个计算结果必定取决于 b，因此返回 b。
# 所以Python解释器在做布尔运算时，只要能提前确定计算结果，它就不会往后算了，直接返回结果。
# 6、不支持自加(i++)和自减(i--)
# 7、地板除（//）除法不管操作数何种数值类型，总是舍去小数部分，返回数字序列中比真正的商小的最接近的数字。
# print 5//3  #1
# print 1.0//2.0  #0.0
# print -1/2  #-1